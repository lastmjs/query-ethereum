scalar BigInt
scalar BigDecimal
scalar Hex32Bytes
scalar Hex
scalar Date

type Query {
    blocks(where: BlocksWhereInput, last: Int, first: Int): BlocksResult!
}

type Block {
    number: Int!
    hash: Hex32Bytes!
    nonce: Hex!
    transactionsRoot: Hex32Bytes!
    transactionCount: Int!
    stateRoot: Hex32Bytes!
    receiptsRoot: Hex32Bytes!
    extraData: Hex! # TODO we might want to allow decoding this
    gasLimit: BigInt!
    gasUsed: BigInt!
    timestamp: Date!
    logsBloom: Hex!
    # mixHash: Hex32Bytes! # TODO This might be specific to a mining node, it isn't being returned from ethereum_etl
    difficulty: BigInt!
    totalDifficulty: BigInt!
    # uncleCount: Int! # TODO I do not know how to get this from the ethereum_etl data yet
    unclesHash: Hex32Bytes!
}

input BlocksWhereInput {
    number: Int
    number_gt: Int
    number_gte: Int
    number_lt: Int
    number_lte: Int

    transactionCount: Int
    transactionCount_gt: Int
    transactionCount_gte: Int
    transactionCount_lt: Int
    transactionCount_lte: Int

    gasLimit: BigInt
    gasLimit_gt: BigInt
    gasLimit_gte: BigInt
    gasLimit_lt: BigInt
    gasLimit_lte: BigInt

    gasUsed: BigInt
    gasUsed_gt: BigInt
    gasUsed_gte: BigInt
    gasUsed_lt: BigInt
    gasUsed_lte: BigInt

    timestamp: Date
    timestamp_gt: Date
    timestamp_gte: Date
    timestamp_lt: Date
    timestamp_lte: Date

    difficulty: BigInt
    difficulty_gt: BigInt
    difficulty_gte: BigInt
    difficulty_lt: BigInt
    difficulty_lte: BigInt

    totalDifficulty: BigInt
    totalDifficulty_gt: BigInt
    totalDifficulty_gte: BigInt
    totalDifficulty_lt: BigInt
    totalDifficulty_lte: BigInt

    ommerCount: Int
    ommerCount_gt: Int
    ommerCount_gte: Int
    ommerCount_lt: Int
    ommerCount_lte: Int
}

type BlocksResult {
    stats: BlockStats!
    items: [Block!]!
}

type BlockStats {
    total: BigInt!
    average: Average!
    transactionCount: TransactionCountStats!
    gasLimit: GasLimitStats!
    gasUsed: GasUsedStats!
    difficulty: DifficultyStats!
    ommerCount: OmmerCountStats!
}

type TransactionCountStats {
    total: BigInt!
    average: Average!
}

type GasLimitStats {
    total: BigInt!
    average: Average!
}

type GasUsedStats {
    total: BigInt!
    average: Average!
}

type DifficultyStats {
    total: BigInt!
    average: Average!
}

type OmmerCountStats {
    total: BigInt!
    average: Average!
}

type Average {
    perBlock: BigDecimal!
    perSecond: BigDecimal!
    perMinute: BigDecimal!
    perHour: BigDecimal!
    perDay: BigDecimal!
    perWeek: BigDecimal!
    perMonth: BigDecimal!
    perYear: BigDecimal!
}